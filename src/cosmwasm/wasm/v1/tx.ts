// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { AccessConfig } from "./types";
import { cosmos } from "../../../cosmos";

export class MsgStoreCode {
  static encode(message: MsgStoreCode, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.bytes(message.wasmByteCode);

    const instantiatePermission = message.instantiatePermission;
    if (instantiatePermission !== null) {
      writer.uint32(42);
      writer.fork();
      AccessConfig.encode(instantiatePermission, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgStoreCode {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgStoreCode();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.wasmByteCode = reader.bytes();
          break;

        case 5:
          message.instantiatePermission = AccessConfig.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  wasmByteCode: Uint8Array;
  instantiatePermission: AccessConfig | null;

  constructor(
    sender: string = "",
    wasmByteCode: Uint8Array = new Uint8Array(0),
    instantiatePermission: AccessConfig | null = null
  ) {
    this.sender = sender;
    this.wasmByteCode = wasmByteCode;
    this.instantiatePermission = instantiatePermission;
  }
}

export function encodeMsgStoreCode(message: MsgStoreCode): Uint8Array {
  return Protobuf.encode(message, MsgStoreCode.encode);
}

export function decodeMsgStoreCode(buffer: Uint8Array): MsgStoreCode {
  return Protobuf.decode<MsgStoreCode>(buffer, MsgStoreCode.decode);
}

@unmanaged
export class MsgStoreCodeResponse {
  static encode(message: MsgStoreCodeResponse, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.codeId);
  }

  static decode(reader: Reader, length: i32): MsgStoreCodeResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgStoreCodeResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.codeId = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  codeId: u64;

  constructor(codeId: u64 = 0) {
    this.codeId = codeId;
  }
}

export function encodeMsgStoreCodeResponse(
  message: MsgStoreCodeResponse
): Uint8Array {
  return Protobuf.encode(message, MsgStoreCodeResponse.encode);
}

export function decodeMsgStoreCodeResponse(
  buffer: Uint8Array
): MsgStoreCodeResponse {
  return Protobuf.decode<MsgStoreCodeResponse>(
    buffer,
    MsgStoreCodeResponse.decode
  );
}

export class MsgInstantiateContract {
  static encode(message: MsgInstantiateContract, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.admin);

    writer.uint32(24);
    writer.uint64(message.codeId);

    writer.uint32(34);
    writer.string(message.label);

    writer.uint32(42);
    writer.bytes(message.msg);

    const funds = message.funds;
    for (let i = 0; i < funds.length; ++i) {
      writer.uint32(50);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(funds[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgInstantiateContract {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgInstantiateContract();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.admin = reader.string();
          break;

        case 3:
          message.codeId = reader.uint64();
          break;

        case 4:
          message.label = reader.string();
          break;

        case 5:
          message.msg = reader.bytes();
          break;

        case 6:
          message.funds.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  admin: string;
  codeId: u64;
  label: string;
  msg: Uint8Array;
  funds: Array<cosmos.base.v1beta1.Coin>;

  constructor(
    sender: string = "",
    admin: string = "",
    codeId: u64 = 0,
    label: string = "",
    msg: Uint8Array = new Uint8Array(0),
    funds: Array<cosmos.base.v1beta1.Coin> = []
  ) {
    this.sender = sender;
    this.admin = admin;
    this.codeId = codeId;
    this.label = label;
    this.msg = msg;
    this.funds = funds;
  }
}

export function encodeMsgInstantiateContract(
  message: MsgInstantiateContract
): Uint8Array {
  return Protobuf.encode(message, MsgInstantiateContract.encode);
}

export function decodeMsgInstantiateContract(
  buffer: Uint8Array
): MsgInstantiateContract {
  return Protobuf.decode<MsgInstantiateContract>(
    buffer,
    MsgInstantiateContract.decode
  );
}

export class MsgInstantiateContractResponse {
  static encode(message: MsgInstantiateContractResponse, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.address);

    writer.uint32(18);
    writer.bytes(message.data);
  }

  static decode(reader: Reader, length: i32): MsgInstantiateContractResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgInstantiateContractResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;

        case 2:
          message.data = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: string;
  data: Uint8Array;

  constructor(address: string = "", data: Uint8Array = new Uint8Array(0)) {
    this.address = address;
    this.data = data;
  }
}

export function encodeMsgInstantiateContractResponse(
  message: MsgInstantiateContractResponse
): Uint8Array {
  return Protobuf.encode(message, MsgInstantiateContractResponse.encode);
}

export function decodeMsgInstantiateContractResponse(
  buffer: Uint8Array
): MsgInstantiateContractResponse {
  return Protobuf.decode<MsgInstantiateContractResponse>(
    buffer,
    MsgInstantiateContractResponse.decode
  );
}

export class MsgExecuteContract {
  static encode(message: MsgExecuteContract, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.contract);

    writer.uint32(26);
    writer.bytes(message.msg);

    const funds = message.funds;
    for (let i = 0; i < funds.length; ++i) {
      writer.uint32(42);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(funds[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgExecuteContract {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgExecuteContract();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.contract = reader.string();
          break;

        case 3:
          message.msg = reader.bytes();
          break;

        case 5:
          message.funds.push(
            cosmos.base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  contract: string;
  msg: Uint8Array;
  funds: Array<cosmos.base.v1beta1.Coin>;

  constructor(
    sender: string = "",
    contract: string = "",
    msg: Uint8Array = new Uint8Array(0),
    funds: Array<cosmos.base.v1beta1.Coin> = []
  ) {
    this.sender = sender;
    this.contract = contract;
    this.msg = msg;
    this.funds = funds;
  }
}

export function encodeMsgExecuteContract(
  message: MsgExecuteContract
): Uint8Array {
  return Protobuf.encode(message, MsgExecuteContract.encode);
}

export function decodeMsgExecuteContract(
  buffer: Uint8Array
): MsgExecuteContract {
  return Protobuf.decode<MsgExecuteContract>(buffer, MsgExecuteContract.decode);
}

export class MsgExecuteContractResponse {
  static encode(message: MsgExecuteContractResponse, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.data);
  }

  static decode(reader: Reader, length: i32): MsgExecuteContractResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgExecuteContractResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.data = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  data: Uint8Array;

  constructor(data: Uint8Array = new Uint8Array(0)) {
    this.data = data;
  }
}

export function encodeMsgExecuteContractResponse(
  message: MsgExecuteContractResponse
): Uint8Array {
  return Protobuf.encode(message, MsgExecuteContractResponse.encode);
}

export function decodeMsgExecuteContractResponse(
  buffer: Uint8Array
): MsgExecuteContractResponse {
  return Protobuf.decode<MsgExecuteContractResponse>(
    buffer,
    MsgExecuteContractResponse.decode
  );
}

export class MsgMigrateContract {
  static encode(message: MsgMigrateContract, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.contract);

    writer.uint32(24);
    writer.uint64(message.codeId);

    writer.uint32(34);
    writer.bytes(message.msg);
  }

  static decode(reader: Reader, length: i32): MsgMigrateContract {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgMigrateContract();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.contract = reader.string();
          break;

        case 3:
          message.codeId = reader.uint64();
          break;

        case 4:
          message.msg = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  contract: string;
  codeId: u64;
  msg: Uint8Array;

  constructor(
    sender: string = "",
    contract: string = "",
    codeId: u64 = 0,
    msg: Uint8Array = new Uint8Array(0)
  ) {
    this.sender = sender;
    this.contract = contract;
    this.codeId = codeId;
    this.msg = msg;
  }
}

export function encodeMsgMigrateContract(
  message: MsgMigrateContract
): Uint8Array {
  return Protobuf.encode(message, MsgMigrateContract.encode);
}

export function decodeMsgMigrateContract(
  buffer: Uint8Array
): MsgMigrateContract {
  return Protobuf.decode<MsgMigrateContract>(buffer, MsgMigrateContract.decode);
}

export class MsgMigrateContractResponse {
  static encode(message: MsgMigrateContractResponse, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.data);
  }

  static decode(reader: Reader, length: i32): MsgMigrateContractResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgMigrateContractResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.data = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  data: Uint8Array;

  constructor(data: Uint8Array = new Uint8Array(0)) {
    this.data = data;
  }
}

export function encodeMsgMigrateContractResponse(
  message: MsgMigrateContractResponse
): Uint8Array {
  return Protobuf.encode(message, MsgMigrateContractResponse.encode);
}

export function decodeMsgMigrateContractResponse(
  buffer: Uint8Array
): MsgMigrateContractResponse {
  return Protobuf.decode<MsgMigrateContractResponse>(
    buffer,
    MsgMigrateContractResponse.decode
  );
}

export class MsgUpdateAdmin {
  static encode(message: MsgUpdateAdmin, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.newAdmin);

    writer.uint32(26);
    writer.string(message.contract);
  }

  static decode(reader: Reader, length: i32): MsgUpdateAdmin {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUpdateAdmin();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.newAdmin = reader.string();
          break;

        case 3:
          message.contract = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  newAdmin: string;
  contract: string;

  constructor(
    sender: string = "",
    newAdmin: string = "",
    contract: string = ""
  ) {
    this.sender = sender;
    this.newAdmin = newAdmin;
    this.contract = contract;
  }
}

export function encodeMsgUpdateAdmin(message: MsgUpdateAdmin): Uint8Array {
  return Protobuf.encode(message, MsgUpdateAdmin.encode);
}

export function decodeMsgUpdateAdmin(buffer: Uint8Array): MsgUpdateAdmin {
  return Protobuf.decode<MsgUpdateAdmin>(buffer, MsgUpdateAdmin.decode);
}

@unmanaged
export class MsgUpdateAdminResponse {
  static encode(message: MsgUpdateAdminResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgUpdateAdminResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUpdateAdminResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgUpdateAdminResponse(
  message: MsgUpdateAdminResponse
): Uint8Array {
  return Protobuf.encode(message, MsgUpdateAdminResponse.encode);
}

export function decodeMsgUpdateAdminResponse(
  buffer: Uint8Array
): MsgUpdateAdminResponse {
  return Protobuf.decode<MsgUpdateAdminResponse>(
    buffer,
    MsgUpdateAdminResponse.decode
  );
}

export class MsgClearAdmin {
  static encode(message: MsgClearAdmin, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(26);
    writer.string(message.contract);
  }

  static decode(reader: Reader, length: i32): MsgClearAdmin {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgClearAdmin();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 3:
          message.contract = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  contract: string;

  constructor(sender: string = "", contract: string = "") {
    this.sender = sender;
    this.contract = contract;
  }
}

export function encodeMsgClearAdmin(message: MsgClearAdmin): Uint8Array {
  return Protobuf.encode(message, MsgClearAdmin.encode);
}

export function decodeMsgClearAdmin(buffer: Uint8Array): MsgClearAdmin {
  return Protobuf.decode<MsgClearAdmin>(buffer, MsgClearAdmin.decode);
}

@unmanaged
export class MsgClearAdminResponse {
  static encode(message: MsgClearAdminResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgClearAdminResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgClearAdminResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgClearAdminResponse(
  message: MsgClearAdminResponse
): Uint8Array {
  return Protobuf.encode(message, MsgClearAdminResponse.encode);
}

export function decodeMsgClearAdminResponse(
  buffer: Uint8Array
): MsgClearAdminResponse {
  return Protobuf.decode<MsgClearAdminResponse>(
    buffer,
    MsgClearAdminResponse.decode
  );
}
